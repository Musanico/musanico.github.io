<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>机器学习-第一周</title>
      <link href="/2023/12/09/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E7%AC%AC%E4%B8%80%E5%91%A8/"/>
      <url>/2023/12/09/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E7%AC%AC%E4%B8%80%E5%91%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="什么是机器学习？"><a href="#什么是机器学习？" class="headerlink" title="什么是机器学习？"></a>什么是机器学习？</h1><p>第一个机器学习的定义来自于Arthur Samuel。<br>他定义机器学习为，在进行特定编程的情况下，给予计算机学习能力的领域。<br>Samuel的定义可以回溯到50年代，他编写了一个西洋棋程序。<br>这程序神奇之处在于，编程者自己并不是个下棋高手。<br>但因为他太菜了，于是就通过编程，让西洋棋程序自己跟自己下了上万盘棋。<br>通过观察哪种布局（棋盘位置）会赢，哪种布局会输，久而久之，<br>这西洋棋程序明白了什么是好的布局，什么样是坏的布局。然后就牛逼大发了，<br>程序通过学习后，玩西洋棋的水平超过了Samuel。这绝对是令人注目的成果。</p><p>机器学习的类型大致可以分为三种：</p><p>1、<strong>有监督学习</strong>：有类别标签的学习，基于训练样本的输入、输出训练得到最优模型，再使用该模型预测新输入的输出</p><p>2、<strong>无监督学习</strong></p><p>3、<strong>强化学习</strong></p><p><img src="https://bed.musanico.top/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E7%AC%AC%E4%B8%80%E5%91%A8/1.png"></p><p>利用有监督学习解决的问题大致上可以被分为两类：</p><p><strong>分类问题</strong>：预测某一样本所属的类别（离散的）。比如给定一个人的数据结构，包括：身高，年龄，体重等信息，然后判断是否健康。</p><p><strong>回归问题</strong>：预测某一样本的所对应的实数输出（连续的）。比如预测某一地区人的平均身高。</p><p><strong>代表算法</strong>：决策树、朴素贝叶斯、逻辑回归、KNN、SVM、神经网络、随机森林、AdaBoost、遗传算法；</p><h3 id="1、线性回归算法"><a href="#1、线性回归算法" class="headerlink" title="1、线性回归算法"></a>1、线性回归算法</h3><p>在机器学习当中，我们有一个变量X的集合用来决定输出变量Y。在输入变量X和输出变量Y之间存在着某种关系。机器学习的目的就是去量化这种关系。</p><p>在线性回归里，以三个输入维度A、B、C来预测P为例，我们的线性方程可以写为：</p><p>F&#x3D;W1∗A+W2∗B+W3∗C</p><p>假设我们知道P的值其实就是与A的值有关，与B、C毫无关系，线性方程的计算结果F是三个维度的加权和，想要使F与P最接近，只需要让线性方程中B、C这两个加项对结果影响最小即可。<br>这个好办，只要使这两项的权值最小，也就是W2和W3的值为0就可以了。<br>这里实际上体现了一种假设，就是待预测的结果与输入的某个或某几个维度相关，而调整权值的目的就是使得与预测结果相关度高的权值越高，确保相关维度的值对最终加权和的贡献越大，反之权值越低，贡献越小。</p><h4 id="线性回归的算法原理"><a href="#线性回归的算法原理" class="headerlink" title="线性回归的算法原理"></a>线性回归的算法原理</h4><p><strong>拟合</strong></p><p>对于一个线性回归问题，也就是说，这里的方程就是一个线性方程，相应的数据集点也一定是根据线性排布的，那么，我们要做的就是不断调整线性方程的两个变量，作出一条能够一一通过这些点的直线，也就是拟合。这个能够拟合数据集点的线性方程，就是我们要找的方程。<br>那怎样调整权值才能最终达到拟合数据的目标？ 这里涉及到机器学习最核心的概念：<strong>在错误中学习</strong>。</p><p>这中间一环需要分两个步骤：首先知道偏离了多少，然后向减少偏差的方向调整权值。这个不断修正的过程就是机器学习中的“学习”，有一点像画画的时候勾勒人物轮廓一样。 具体来说需要经过以下两个步骤：</p><p>偏差度量：我们不仅要知道偏了，还要知道偏了多少，找到目标和实际的偏差距离。在机器学习中我们使用“损失函数”来度量偏差的距离。<br>权值调整：调整权值要解决两个细节问题，即权值是要增加还是减少、增加多少或者减少多少。<br>这两个问题都可以直接使用现成的数学工具进行解决，机器学习中将这些数学工具称为“优化方法”。</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>有这样一组数据，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = [[5.05, 5.69], [4.92, 6.61], [4.67, 5.48], [4.54, 6.11], [4.26, 6.39],</span><br><span class="line">        [4.07, 4.81], [4.01, 4.16], [4.01, 5.55], [3.66, 5.05], [3.43, 4.34],</span><br><span class="line">        [3.12, 3.24], [3.02, 4.80], [2.87, 4.01], [2.64, 3.17], [2.48, 1.61],</span><br><span class="line">        [2.48, 2.62], [2.02, 2.50], [1.95, 3.59], [1.79, 1.49], [1.54, 2.10], ]</span><br></pre></td></tr></table></figure><p>它的图像画出来是这样的散点图：</p><p><img src="https://bed.musanico.top/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E7%AC%AC%E4%B8%80%E5%91%A8/3.png"></p><p>接下来我们引入两个数据分析用到的库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br></pre></td></tr></table></figure><p>我们使用最小二乘法解决这一个问题，我们先来看一下公式</p><p><img src="https://bed.musanico.top/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E7%AC%AC%E4%B8%80%E5%91%A8/4.png"><br><img src="https://bed.musanico.top/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E7%AC%AC%E4%B8%80%E5%91%A8/5.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">def linear_plot():</span><br><span class="line"></span><br><span class="line">    SumXiYi = 0</span><br><span class="line">    SumXi = 0</span><br><span class="line">    SumYi = 0</span><br><span class="line">    SumXi2 = 0</span><br><span class="line">    PointX = []</span><br><span class="line">    PointY = []</span><br><span class="line">    for item in range(len(data)):</span><br><span class="line">        XiYi = data[item][0] * data[item][1]</span><br><span class="line">        SumXiYi += XiYi</span><br><span class="line">        SumXi += data[item][0]</span><br><span class="line">        SumYi += data[item][1]</span><br><span class="line">        SumXi2 += data[item][0] * data[item][0]</span><br><span class="line">        PointX.append(data[item][0])</span><br><span class="line">        PointY.append(data[item][1])</span><br><span class="line"></span><br><span class="line">    w = (len(data) * SumXiYi - SumXi * SumYi) / (len(data) * SumXi2 - SumXi * SumXi)</span><br><span class="line">    b = (SumXi2 * SumYi - SumXiYi * SumXi) / (len(data) * SumXi2 - SumXi * SumXi)</span><br><span class="line">    w = round(w, 2)</span><br><span class="line">    b = round(b, 2)</span><br><span class="line"></span><br><span class="line">    X = np.arange(0.5, 6, 0.01)</span><br><span class="line">    Y = w * X + b</span><br><span class="line"></span><br><span class="line">    plt.plot(X, Y, color=&#x27;red&#x27;)</span><br><span class="line">    plt.scatter(PointX, PointY, color=&#x27;blue&#x27;)</span><br><span class="line"></span><br><span class="line">    fig = plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return w, b</span><br></pre></td></tr></table></figure><p>最后我们得出的拟合方程和图像</p><p><strong>y&#x3D;1.31x-0.17</strong></p><p><img src="https://bed.musanico.top/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E7%AC%AC%E4%B8%80%E5%91%A8/6.png"></p><h3 id="2-逻辑回归算法"><a href="#2-逻辑回归算法" class="headerlink" title="2. 逻辑回归算法"></a>2. 逻辑回归算法</h3><p>逻辑回归预测的是离散的值（比如一个学生CB有没有挂科，是：0，否：1）。</p><p>逻辑回归最适用于二分类（数据只分为两类，Y&#x3D;0或1，一般用1作为默认的类）。<br>我们称其为逻辑回归（logistic regression）是因为我们的转换函数采用了logistic函数 (h(x)&#x3D;1&#x2F;(1+e的-x次方))，也叫sigmoid函数<br>在逻辑回归中，我们首先得到的输出是连续的默认类的概率p（0到1）。转换函数 (h(x)&#x3D;1&#x2F;(1+e的-x次方))的值域便是（0,1）。我们对该函数设置一个域值t。若概率p&gt;t，则预测结果为1。</p><p><img src="https://bed.musanico.top/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E7%AC%AC%E4%B8%80%E5%91%A8/2.png"></p><p>因此，逻辑回归的目标便是训练数据找到适当的参数的值，使得预测的输出和实际的输出最小。</p><p>这是CSDN的一篇文章，里面对于逻辑回归算法有非常详细的教程</p><p><a href="http://t.csdnimg.cn/H8QZl">地址</a></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Clash订阅转换</title>
      <link href="/2023/02/12/Clash%E8%AE%A2%E9%98%85%E8%BD%AC%E6%8D%A2/"/>
      <url>/2023/02/12/Clash%E8%AE%A2%E9%98%85%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="这是一个Clash订阅转换接口"><a href="#这是一个Clash订阅转换接口" class="headerlink" title="这是一个Clash订阅转换接口"></a>这是一个Clash订阅转换接口</h2><p>   <img src="https://bed.musanico.top/clash%E8%AE%A2%E9%98%85%E8%BD%AC%E6%8D%A2/clash.jpg"></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>1.url: 为你的一元机场订阅链接<br>2.interval: 为自动拉取节点的时间间隔,单位为秒,若无此参数则默认为600<br>若是你一般一直把clash挂在后台（例如挂在软路由、NAS，或者长期挂后台），建议此项设置大一点，例如3600，以减小订阅服务器负载<br>若是一般只是短时间使用时打开clash，建议设置小一点，比如300或600，防止无法及时拉取节点</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ol><li>不指定时间间隔</li></ol><p> <a href="https://example.com/sub?url=">https://example.com/sub?url=</a>&lt;订阅链接&gt;</p><ol start="2"><li>指定时间间隔</li></ol><p> <a href="https://example.com/sub?url=">https://example.com/sub?url=</a>&lt;订阅链接&gt;&amp;interval&#x3D;&lt;时间间隔&gt;</p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/SubConv/SubConv">Geniucker&#x2F;sub-conv: Subscription Converter for Clash (github.com)</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java中的正则表达式</title>
      <link href="/2022/10/18/Java%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2022/10/18/Java%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>由于刚开始学习Java，很多语法都不会，有一次做到一道题，仔细思考过后发现可以用高中学的visual basic中的Mid()函数，但是我无法用Java语言给他表示出来&#x2F;(ㄒoㄒ)&#x2F;~~，下面是我想出来的“伪代码”。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Mid_Java &#123;</span><br><span class="line">    public static String Mid(String in, int i, int j)&#123;</span><br><span class="line">        char a[] = in.toCharArray();</span><br><span class="line">        String result = &quot;&quot;;</span><br><span class="line">        for(int x = i -1;x &lt; j;x++)&#123;</span><br><span class="line">            result = result + a[x];</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Scanner scanner = new Scanner(System.in);</span><br><span class="line">        String a = scanner.nextLine();</span><br><span class="line">        int i = scanner.nextInt();</span><br><span class="line">        int j = scanner.nextInt();</span><br><span class="line">        System.out.println(Mid(a,i,j));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><p>后来通过学长，知道了还有<strong>正则表达式</strong>这样一个东西</p><h2 id="正则表达式（简略版）"><a href="#正则表达式（简略版）" class="headerlink" title="正则表达式（简略版）"></a>正则表达式（简略版）</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>正则表达式简单说来就是通过一串字符来描述一个规则，我们可以用这个规则来和输入值进行匹配，从而输出true或者false。<br>正则表达式可以大幅度简化我们的代码长度，但是他需要一定的学习成本（因为要记的东西实在有点多&#x2F;(ㄒoㄒ)&#x2F;~~），但是你只要理解并多使用它，你会发现它真的非常好用！</p><h3 id="构成"><a href="#构成" class="headerlink" title="构成"></a>构成</h3><p>正则表达式由普通字符和元字符构成，普通字符就不说了，所谓的元字符就是在正则表达式中能表达特定意思的一类字符。</p><h3 id="Java中的正则校验"><a href="#Java中的正则校验" class="headerlink" title="Java中的正则校验"></a>Java中的正则校验</h3><p>正则表达式在Java中的主要用途就是用于校验字符串，格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boolean result = Pattern.matches(regex,input);</span><br></pre></td></tr></table></figure><p>regex表示规则<br>input表示输入的字符串</p><h3 id="一些正则表达式"><a href="#一些正则表达式" class="headerlink" title="一些正则表达式"></a>一些正则表达式</h3><p>注意：在Java的正则表达式中，“&#x2F;”要写成“&#x2F;&#x2F;”，因为前面的一个“&#x2F;”表示字符串转义！！！</p><h4 id="1、普通字符"><a href="#1、普通字符" class="headerlink" title="1、普通字符"></a>1、普通字符</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">import java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line">public class regex &#123;</span><br><span class="line">    public static boolean check(String str)&#123;</span><br><span class="line">        boolean flag = Pattern.matches(&quot;abcdef&quot;,str);</span><br><span class="line">        return flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Scanner scanner = new Scanner(System.in);</span><br><span class="line">        System.out.println(&quot;abcdef&quot;);</span><br><span class="line">        String a = scanner.nextLine();</span><br><span class="line">        boolean flag = check(a);</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、-d"><a href="#2、-d" class="headerlink" title="2、\d"></a>2、\d</h4><p>\d表示一个数字<br>如：aaa\b表示aaa后跟着一个数字<br>aaa\dbb表示aaa和bb中间有一个数字</p><h4 id="3、-D"><a href="#3、-D" class="headerlink" title="3、\D"></a>3、\D</h4><p>\D与\d刚好相反，表示一个非数字</p><h4 id="4、-w"><a href="#4、-w" class="headerlink" title="4、\w"></a>4、\w</h4><p>\w表示一个字母、数字或者下划线，字母大小写都可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line">public class regex &#123;</span><br><span class="line">    public static boolean check(String str)&#123;</span><br><span class="line">        boolean flag = Pattern.matches(&quot;12\\w45&quot;,str);</span><br><span class="line">        return flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String a1 = &quot;12345&quot;;</span><br><span class="line">        String a2 = &quot;12S45&quot;;</span><br><span class="line">        String a3 = &quot;12s45&quot;;</span><br><span class="line">        String a4 = &quot;12_45&quot;;</span><br><span class="line">        String a5 = &quot;12=45&quot;;</span><br><span class="line">        String a6 = &quot;12 45&quot;;</span><br><span class="line">        System.out.println(a1+check(a1));</span><br><span class="line">        System.out.println(a2+check(a2));</span><br><span class="line">        System.out.println(a3+check(a3));</span><br><span class="line">        System.out.println(a4+check(a4));</span><br><span class="line">        System.out.println(a5+check(a5));</span><br><span class="line">        System.out.println(a6+check(a6));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><img src="https://sphinxrider.gitee.io/bed/Java%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/w.webp"></p><h4 id="5、-W"><a href="#5、-W" class="headerlink" title="5、\W"></a>5、\W</h4><p>\W与\w相反</p><h4 id="6、-s"><a href="#6、-s" class="headerlink" title="6、\s"></a>6、\s</h4><p>\s表示一个看不见的字符，即空格或Tab</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line">public class regex &#123;</span><br><span class="line">    public static boolean check(String str)&#123;</span><br><span class="line">        boolean flag = Pattern.matches(&quot;12\\s45&quot;,str);</span><br><span class="line">        return flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String a1 = &quot;12345&quot;;</span><br><span class="line">        String a2 = &quot;12S45&quot;;</span><br><span class="line">        String a3 = &quot;12s45&quot;;</span><br><span class="line">        String a4 = &quot;12_45&quot;;</span><br><span class="line">        String a5 = &quot;12=45&quot;;</span><br><span class="line">        String a6 = &quot;12 45&quot;;</span><br><span class="line">        System.out.println(a1+check(a1));</span><br><span class="line">        System.out.println(a2+check(a2));</span><br><span class="line">        System.out.println(a3+check(a3));</span><br><span class="line">        System.out.println(a4+check(a4));</span><br><span class="line">        System.out.println(a5+check(a5));</span><br><span class="line">        System.out.println(a6+check(a6));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><img src="https://sphinxrider.gitee.io/bed/Java%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/s.webp"></p><h4 id="7、-S"><a href="#7、-S" class="headerlink" title="7、\S"></a>7、\S</h4><p>\S与\s相反，表示一个看得见的字符</p><h4 id="8、"><a href="#8、" class="headerlink" title="8、."></a>8、.</h4><p>.（小数点）表示任意单个字符，除了“\n”和“\r”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line">public class regex &#123;</span><br><span class="line">    public static boolean check(String str)&#123;</span><br><span class="line">        boolean flag = Pattern.matches(&quot;12...67&quot;,str);</span><br><span class="line">        return flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String a1 = &quot;1234567&quot;;</span><br><span class="line">        String a2 = &quot;12S4567&quot;;</span><br><span class="line">        String a3 = &quot;12s4567&quot;;</span><br><span class="line">        String a4 = &quot;12_4567&quot;;</span><br><span class="line">        String a5 = &quot;12=4567&quot;;</span><br><span class="line">        String a6 = &quot;12 4 67&quot;;</span><br><span class="line">        System.out.println(a1+check(a1));</span><br><span class="line">        System.out.println(a2+check(a2));</span><br><span class="line">        System.out.println(a3+check(a3));</span><br><span class="line">        System.out.println(a4+check(a4));</span><br><span class="line">        System.out.println(a5+check(a5));</span><br><span class="line">        System.out.println(a6+check(a6));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<img src="https://sphinxrider.gitee.io/bed/Java%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E7%82%B9.webp"></p><h4 id="9、"><a href="#9、" class="headerlink" title="9、|"></a>9、|</h4><p>|表示或的关系，即输入的字符串对应正则表达式中的一个就行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line">public class regex &#123;</span><br><span class="line">    public static boolean check(String str)&#123;</span><br><span class="line">        boolean flag = Pattern.matches(&quot;12|34|56&quot;,str);</span><br><span class="line">        return flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String a1 = &quot;123456&quot;;</span><br><span class="line">        String a2 = &quot;12&quot;;</span><br><span class="line">        String a3 = &quot;34&quot;;</span><br><span class="line">        String a4 = &quot;56&quot;;</span><br><span class="line">        //String a5 = &quot;&quot;;</span><br><span class="line">        //String a6 = &quot;&quot;;</span><br><span class="line">        System.out.println(a1+check(a1));</span><br><span class="line">        System.out.println(a2+check(a2));</span><br><span class="line">        System.out.println(a3+check(a3));</span><br><span class="line">        System.out.println(a4+check(a4));</span><br><span class="line">        //System.out.println(a5+check(a5));</span><br><span class="line">        //System.out.println(a6+check(a6));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<img src="https://sphinxrider.gitee.io/bed/Java%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%88%96.webp"></p><p>当你需要选择的字符串前后有字符串时，一定要加上括号<br>如：aa(bb|cc|dd)ee</p><h4 id="10、"><a href="#10、" class="headerlink" title="10、[]"></a>10、[]</h4><p>[]表示匹配中括号内的任意一个字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line">public class regex &#123;</span><br><span class="line">    public static boolean check(String str)&#123;</span><br><span class="line">        boolean flag = Pattern.matches(&quot;[abc]&quot;,str);</span><br><span class="line">        return flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String a1 = &quot;a&quot;;</span><br><span class="line">        String a2 = &quot;ab&quot;;</span><br><span class="line">        String a3 = &quot;b&quot;;</span><br><span class="line">        String a4 = &quot;c&quot;;</span><br><span class="line">        String a5 = &quot;d&quot;;</span><br><span class="line">        //String a6 = &quot;&quot;;</span><br><span class="line">        System.out.println(a1+&quot; &quot;+check(a1));</span><br><span class="line">        System.out.println(a2+&quot; &quot;+check(a2));</span><br><span class="line">        System.out.println(a3+&quot; &quot;+check(a3));</span><br><span class="line">        System.out.println(a4+&quot; &quot;+check(a4));</span><br><span class="line">        System.out.println(a5+&quot; &quot;+check(a5));</span><br><span class="line">        //System.out.println(a6+check(a6));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<img src="https://sphinxrider.gitee.io/bed/Java%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/1.webp"></p><h4 id="11、"><a href="#11、" class="headerlink" title="11、[^]"></a>11、[^]</h4><p>[^]表示与括号中的字符都不匹配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line">public class regex &#123;</span><br><span class="line">    public static boolean check(String str)&#123;</span><br><span class="line">        boolean flag = Pattern.matches(&quot;[^abc]&quot;,str);</span><br><span class="line">        return flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String a1 = &quot;a&quot;;</span><br><span class="line">        String a2 = &quot;ab&quot;;</span><br><span class="line">        String a3 = &quot;b&quot;;</span><br><span class="line">        String a4 = &quot;c&quot;;</span><br><span class="line">        String a5 = &quot;d&quot;;</span><br><span class="line">        //String a6 = &quot;&quot;;</span><br><span class="line">        System.out.println(a1+&quot; &quot;+check(a1));</span><br><span class="line">        System.out.println(a2+&quot; &quot;+check(a2));</span><br><span class="line">        System.out.println(a3+&quot; &quot;+check(a3));</span><br><span class="line">        System.out.println(a4+&quot; &quot;+check(a4));</span><br><span class="line">        System.out.println(a5+&quot; &quot;+check(a5));</span><br><span class="line">        //System.out.println(a6+check(a6));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<img src="https://sphinxrider.gitee.io/bed/Java%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/[^].webp"></p><h4 id="12、-a-z"><a href="#12、-a-z" class="headerlink" title="12、[a-z]"></a>12、[a-z]</h4><p>[a-z]表示的是a到z中的任意一个字符，当然，a和z可以替换成别的字符，[a-z]这个表达式可以用来检测字符串中是否有字母</p><h4 id="13、-a-z"><a href="#13、-a-z" class="headerlink" title="13、[^a-z]"></a>13、[^a-z]</h4><p>不想说了，原理一样</p><h4 id="14、-num"><a href="#14、-num" class="headerlink" title="14、\num"></a>14、\num</h4><p>这里的num是数字<br>举个例子：正则表达式：ab(c)de\1<br>这个表示只有abcde能和他匹配</p><p>正则表达式：ab(c)(d)e\2<br>匹配式：abcded</p><p>正则表达式：ab(c)(d)e\1\2<br>匹配式：abcdecd</p><h4 id="15、？"><a href="#15、？" class="headerlink" title="15、？"></a>15、？</h4><p>？表示前面一个字符能出现一次或零次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class regex &#123;</span><br><span class="line">    public static boolean check(String str)&#123;</span><br><span class="line">        boolean flag = Pattern.matches(&quot;abc?de&quot;,str);</span><br><span class="line">        return flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String a1 = &quot;abcde&quot;;</span><br><span class="line">        String a2 = &quot;abccde&quot;;</span><br><span class="line">        String a3 = &quot;abde&quot;;</span><br><span class="line">        //String a4 = &quot;c&quot;;</span><br><span class="line">        //String a5 = &quot;d&quot;;</span><br><span class="line">        //String a6 = &quot;&quot;;</span><br><span class="line">        System.out.println(a1+&quot; &quot;+check(a1));</span><br><span class="line">        System.out.println(a2+&quot; &quot;+check(a2));</span><br><span class="line">        System.out.println(a3+&quot; &quot;+check(a3));</span><br><span class="line">        //System.out.println(a4+&quot; &quot;+check(a4));</span><br><span class="line">        //System.out.println(a5+&quot; &quot;+check(a5));</span><br><span class="line">        //System.out.println(a6+check(a6));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<img src="https://sphinxrider.gitee.io/bed/Java%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E9%97%AE%E5%8F%B7.webp"></p><h4 id="16、"><a href="#16、" class="headerlink" title="16、+"></a>16、+</h4><p>+表示前面的字符至少要出现一次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line">public class regex &#123;</span><br><span class="line">    public static boolean check(String str)&#123;</span><br><span class="line">        boolean flag = Pattern.matches(&quot;abc+de&quot;,str);</span><br><span class="line">        return flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String a1 = &quot;abcde&quot;;</span><br><span class="line">        String a2 = &quot;abcccccccde&quot;;</span><br><span class="line">        String a3 = &quot;abde&quot;;</span><br><span class="line">        //String a4 = &quot;c&quot;;</span><br><span class="line">        //String a5 = &quot;d&quot;;</span><br><span class="line">        //String a6 = &quot;&quot;;</span><br><span class="line">        System.out.println(a1+&quot; &quot;+check(a1));</span><br><span class="line">        System.out.println(a2+&quot; &quot;+check(a2));</span><br><span class="line">        System.out.println(a3+&quot; &quot;+check(a3));</span><br><span class="line">        //System.out.println(a4+&quot; &quot;+check(a4));</span><br><span class="line">        //System.out.println(a5+&quot; &quot;+check(a5));</span><br><span class="line">        //System.out.println(a6+check(a6));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<img src="https://sphinxrider.gitee.io/bed/Java%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E5%8A%A0.webp"></p><h4 id="17、-n"><a href="#17、-n" class="headerlink" title="17、{n}"></a>17、{n}</h4><p>{n}表示前面的字符出现了n次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line">public class regex &#123;</span><br><span class="line">    public static boolean check(String str)&#123;</span><br><span class="line">        boolean flag = Pattern.matches(&quot;abc&#123;3&#125;de&quot;,str);</span><br><span class="line">        return flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String a1 = &quot;abcde&quot;;</span><br><span class="line">        String a2 = &quot;abcccde&quot;;</span><br><span class="line">        String a3 = &quot;abc cde&quot;;</span><br><span class="line">        //String a4 = &quot;c&quot;;</span><br><span class="line">        //String a5 = &quot;d&quot;;</span><br><span class="line">        //String a6 = &quot;&quot;;</span><br><span class="line">        System.out.println(a1+&quot; &quot;+check(a1));</span><br><span class="line">        System.out.println(a2+&quot; &quot;+check(a2));</span><br><span class="line">        System.out.println(a3+&quot; &quot;+check(a3));</span><br><span class="line">        //System.out.println(a4+&quot; &quot;+check(a4));</span><br><span class="line">        //System.out.println(a5+&quot; &quot;+check(a5));</span><br><span class="line">        //System.out.println(a6+check(a6));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<img src="https://sphinxrider.gitee.io/bed/Java%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%7Bn%7D.webp"></p><h4 id="18、-n-m"><a href="#18、-n-m" class="headerlink" title="18、{n,m}"></a>18、{n,m}</h4><p>{n,m}表示前面的字符至少出现了n次，至多出现了m次</p><h4 id="19、"><a href="#19、" class="headerlink" title="19、*"></a>19、*</h4><p>*表示前面的字符出现了任意次数，包括0次</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>个人博客建站教程</title>
      <link href="/2022/08/04/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99%E6%95%99%E7%A8%8B/"/>
      <url>/2022/08/04/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>其实有好多博客框架可供选择，最著名的比如说wordpress，但是用它搭建博客需要自己的服务器和域名，这或许对一些喜欢白嫖的人不太友好(比如说我)<br>近些年来很多用户都喜欢使用 GitHub Pages 来搭建 Hexo 静态博客网站，其最吸引人的莫过于完全免费使用，并且非常稳定,甚至当你几年不去动它，它还是好好的<br>本文就详细介绍一下如何用 Hexo 和 Github Pages 搭建一个个人博客</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装<a href="http://nodejs.cn/">Node.js</a></h2><p>   <img src="https://bed.musanico.top/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/node.webp"></p><p>   选择长期支持版本</p><h2 id="去官网安装Git或者去国内淘宝镜像安装"><a href="#去官网安装Git或者去国内淘宝镜像安装" class="headerlink" title="去官网安装Git或者去国内淘宝镜像安装"></a>去官网安装<a href="https://git-scm.com/">Git</a>或者去国内<a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/">淘宝镜像</a>安装</h2><p>   安装Node.js和Git一定要勾选<strong>“add to path”</strong>，默认已勾选。</p><h2 id="注册一个GitHub账号，并新建一个仓库"><a href="#注册一个GitHub账号，并新建一个仓库" class="headerlink" title="注册一个GitHub账号，并新建一个仓库"></a>注册一个GitHub账号，并新建一个仓库</h2><p>   <img src="https://bed.musanico.top/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/new.webp"></p><p>   <img src="https://bed.musanico.top/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/%E5%88%9B%E5%BB%BA%E5%9F%9F%E5%90%8D.webp"></p><p>   这个域名一定要设成 <strong>你的GitHub账户名.github.io</strong>，不然之会无法建站<br>   我们的博客是通过GitHub pages才能让所有人看见，以后我们在本地的所有更改都要上传到仓库里面，网页才有更新</p><h1 id="配置本地文件"><a href="#配置本地文件" class="headerlink" title="配置本地文件"></a>配置本地文件</h1><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>   创建一个文件夹，用来存放你博客里的所有东西，然后打开它，右键“Git Bash here”，打开Git Bash窗口</p><p>   <img src="https://bed.musanico.top/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/gitbash.webp"></p><p>   运行以下代码<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><br>   安装 Hexo 完成后，执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><br>   新建完成后，指定文件夹的目录如下：<br>      .<br>      ├── _config.yml<br>      ├── package.json<br>      ├── scaffolds<br>      ├── source<br>      |   ├── _drafts<br>      |   └── _posts<br>      └── themes</p><h2 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h2><p>   现在最基本的框架已经建成了，你可以打开Git Bash，输入hexo s在本地预览网页，hexo的初始主题叫landscape，就是下图这样</p><p>   <img src="https://bed.musanico.top/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/landscape.webp"></p><p>   然而这个主题并不好看（小声），hexo也提供了各种各样的主题，像我现在用的是butterfly的主题。<br>   如何更换butterfly主题我也不多说了，<a href="https://butterfly.js.org/posts/21cfbf15/">butterfly官网</a>有详细的介绍以及配置文件的说明<br>   如果你喜欢别的主题的话也可以自行去相应官网了解</p><h1 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h1><p>  主题配置好了后，我们就可以上传到之前准备的GitHub仓库了</p><h2 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h2><h3 id="设置user-name和user-email"><a href="#设置user-name和user-email" class="headerlink" title="设置user.name和user.email"></a>设置user.name和user.email</h3><p>   在博客根目录右键打开git bash，输入以下两行代码设置配置信息<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &lt;user_name&gt;</span><br><span class="line">git config --global user.email &lt;user_email&gt;</span><br></pre></td></tr></table></figure><br>   user_name是你的GitHub账号名字，user_email是你的注册邮箱（输入的时候记得把尖括号去掉）</p><h3 id="本地安装Hexo的git部署插件"><a href="#本地安装Hexo的git部署插件" class="headerlink" title="本地安装Hexo的git部署插件"></a>本地安装Hexo的git部署插件</h3><p>   在git bash中输入<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><br>   WARNING可以忽略</p><h2 id="生成SSH-Key并连接仓库"><a href="#生成SSH-Key并连接仓库" class="headerlink" title="生成SSH Key并连接仓库"></a>生成SSH Key并连接仓库</h2><p>创建SHH Key</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &lt;邮箱&gt;</span><br></pre></td></tr></table></figure><p>&lt;邮箱&gt;输入自己的邮箱，然后一直按enter（建议不要设置密码啥的，不然以后上传一次就要输一次），设置完后打开用户文件夹下的.ssh文件夹，找到id_rsa.pub打开，复制里面的内容。<br>进入GitHub的设置（头像里面），点击侧边栏的SSH and GDP keys，新建（new SSH key),标题随便填，将内容粘贴到下方。<br>继续在git bash中输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh git@github.com</span><br></pre></td></tr></table></figure><p>若输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Are you sure you want to continue connecting (yes/no)? </span><br></pre></td></tr></table></figure><p>输入yes<br>这样就成功连接了仓库</p><h2 id="修改-config-yml文件"><a href="#修改-config-yml文件" class="headerlink" title="修改_config.yml文件"></a>修改_config.yml文件</h2><p>在博客根目录下找到_config.yml文件</p><p><img src="https://bed.musanico.top/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/%E6%89%93%E5%BC%80config.webp"></p><p>拉到最底部，在#Deployment做如下修改</p><p><img src="https://bed.musanico.top/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/%E4%BF%AE%E6%94%B9%E5%9C%B0%E5%9D%80.webp"></p><p>repo填的是你自己的仓库地址</p><h2 id="上传-1"><a href="#上传-1" class="headerlink" title="上传"></a>上传</h2><p>做完上述步骤后，我们就可以上传文件了，在git bash中执行hexo三连：hexo clean 、 hexo g 、 hexo d</p><p>常用命令<br>清除缓存：hexo clean<br>生成静态文件：hexo generate可简写为 hexo g<br>启动服务器：hexo server或者 hexo s 常用参数：-p（–port）重设端口<br>部署：hexo deploy可简写为hexo d，用于将网站部署到服务器上。<br>一般发布文章或者修改博客后需要这些操作： <strong>清除缓存&gt;生成静态文件&gt;启动服务器</strong> ，测试没问题后再部署。</p><p>等待一会就可以看到仓库里有东西了，这时候我们可以点开action来查看网页部署进度，等到转圈的黄点变成绿色的勾时，就说明已经部署完毕，我们就可以打开之前设置好的域名来查看自己的博客了</p><p><img src="https://bed.musanico.top/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/action.webp"></p><h1 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h1><h2 id="官方博客"><a href="#官方博客" class="headerlink" title="官方博客"></a>官方博客</h2><p>对于博客主题的详细配置，<a href="https://butterfly.js.org/posts/21cfbf15/">butterfly官方博客</a>有详细的说明</p><h2 id="如何写文章"><a href="#如何写文章" class="headerlink" title="如何写文章"></a>如何写文章</h2><h3 id="创建一个md文件"><a href="#创建一个md文件" class="headerlink" title="创建一个md文件"></a>创建一个md文件</h3><p>md文件是markdown文件的缩写，可以通过以下命令来创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &lt;title&gt;</span><br></pre></td></tr></table></figure><p>举个栗子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;我的第一篇文章&quot;</span><br></pre></td></tr></table></figure><h3 id="layout（布局）"><a href="#layout（布局）" class="headerlink" title="layout（布局）"></a>layout（布局）</h3><p>创建md文件时，我们可以更改layout指定布局<br>格式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>举个栗子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;首页&quot;</span><br></pre></td></tr></table></figure><p>在新建md文件时，hexo会根据博客根目录中的scaffolds文件夹内的模板来建立新的文件</p><p><img src="https://bed.musanico.top/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/scaffolds.webp"></p><p>如果没有指定的话，默认为post布局，可以在_config.yml中修改default_layout参数来修改默认布局</p><h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><p>当我们创建一个md文件后，打开后会看到一些内容，这些称为Front-matter，它是文件最上方以 — 分隔的区域，用于指定个别文件的变量</p><p>Front-matter预定义参数</p><p>layout  布局  默认为true，如果你不想你的文章被处理，可以设置为false<br>title  标题  标题会显示在最上方居中位置<br>date  建立日期    如果不指定则为默认值-文件创建日期，可以自定义。<br>update  更新日期  如果不指定则为默认值-文件修改后重新生成静态文件的日期。<br>comments  是否开启文章的评论功能 默认值为true<br>tags  标签（不适用于页面page布局）<br>categoreies  分类（不适用于页面page布局）<br>permalink  覆盖文章网址<br>keywords  仅用于 meta 标签和 Open Graph 的关键词（不推荐使用）</p><h3 id="另外一种方法"><a href="#另外一种方法" class="headerlink" title="另外一种方法"></a>另外一种方法</h3><p>可以直接在source&#x2F;_posts&#x2F;内新建一个文本文件，后缀改成.md，然后用vscode打开，就可以直接在里面编辑，这种方法的缺点是没有Front-matter</p><h3 id="版本限制"><a href="#版本限制" class="headerlink" title="版本限制"></a>版本限制</h3><p><img src="https://bed.musanico.top/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/%E7%89%88%E6%9C%AC%E9%99%90%E5%88%B6.webp"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
